%decls %{
#include <map>
#include <string>
#include <list>
#include <sstream>
#include <iostream>

using namespace std;

class Expr;
typedef list<Expr *> ExprList;
%}

%{
#include "opascal_tree.h"
#include "simb_table.h"


map<string, int> stable;
string class_name_actual = "";

ParameterDefList *params_list = NULL;
ParameterDefMap *params_map = NULL;


MethodDefList *methods_list = NULL;
MethodDefList *virtualmethods_list = NULL;
MethodDefList *overridemethods_list = NULL;

MethodDefMap *methods_map = NULL;

VariableDefList *variables_list = NULL;
VariableDefMap *variables_map = NULL;

ClassDefMap classes_map;

void getVectorVirtuales(MethodDefVector *vector, MethodDefMap *mapa, string nom_clase) {
	ClassDef *clase = classes_map[nom_clase];

	if (clase->base.size() > 0) {
		ClassDef *css = classes_map[clase->base];
		getVectorVirtuales(vector, mapa,clase->base);
	}

	list<MethodDef*>::iterator it;
	for (it = clase->virtualmethod_def_list->begin() ; it != clase->virtualmethod_def_list->end(); it++){
		vector->push_back(*it);
		MethodDef *tmp = *it;
		cout << tmp->method_name << endl;
//		(*mapa)[*it] = NULL;
	}
}

%}

%option lang="C++"

%node OPNode %abstract %typedef

%node ProgramNode OPNode = {
	string	name;
	OPNode 	*typedef_list_node;
	OPNode	*method_impl_list_node;
	OPNode	*var_decl_list_node;
	Statement	*block;
}

//------------------TypeDefList------------------
%node TypeDefList OPNode = {
	OPNode	*class_decl_node;
	OPNode	*next;
}

%node ClassDeclaration OPNode = {
	string class_name;
	OPNode	*inherits_node;
	OPNode	*field_decl_list_node;
	OPNode	*method_decl_list_node;
}

%node InheritsNode OPNode = {
	string class_name;
}

%node FieldDeclList OPNode = {
	OPNode	*field_decl_node;
	OPNode	*next;
}

%node FieldDecl OPNode = {
	string field_type;
	string field_name;
}


//------------------MethodDeclList------------------
%node MethodDeclList OPNode = {
	OPNode	*method_decl_node;
	OPNode	*next;
}

%node MethodDecl OPNode = {
	int method_kind;
	string method_name;
	OPNode *method_type_node;
	OPNode *param_decl_list_node;
	OPNode *modifier_list_node;
}

%node ModifierList OPNode = {
	int modifier;
	OPNode *next;
}

%node ParameterDeclList OPNode = {
	OPNode	*param_decl_node;
	OPNode	*next;
}

%node ParameterDecl OPNode = {
	string param_name;
	OPNode *param_type_node;
}

//------------------MethodImplList------------------
%node MethodImplList OPNode = {
	OPNode	*method_impl_node;
	OPNode	*next;
}

%node MethodImpl OPNode = {
	int method_kind;
	string class_name;
	string method_name;
	OPNode	*method_type_node;
	OPNode	*param_list_node;
	Statement *block;
}

//------------------VarDeclList------------------
%node VarDeclList OPNode = {
	OPNode	*var_decl;
	OPNode	*next;
}

%node VarDecl OPNode = {
	string var_name;
	OPNode *var_type_node;
}

%node OPType OPNode %abstract
%node IntegerType OPType

%node ClassType OPType = {
	string class_name;
}

//......gen_opnode_code()......
%operation %virtual string gen_op_code(OPNode *this)

//VarDeclList
gen_op_code(ClassType) {
	return class_name;
}

gen_op_code(IntegerType) {
	return "int";
}

gen_op_code(VarDecl) {
	string type_name = var_type_node->gen_op_code();
	string variable;

	if (type_name != "int")
		variable = "*" + var_name;
	else
		variable = var_name;

	ostringstream out;
	out << type_name << " " << variable << ";" << endl;
	
	if (variables_map != NULL){
		Type type;
		if (var_type_node != NULL){
			if (var_type_node->getKind() == ClassType_kind){
				type.class_id = type_name;
				type.type_id = Class_Type;
			} else {
				type.class_id = "int";
				type.type_id = Int_Type;
			}
		} else {
			type.class_id = "void";
			type.type_id = Void_Type;
		}

		VariableDef *var = new VariableDef(variable, type);

		variables_list->push_back(var);
		(*variables_map)[variable] = var;
	}

	return out.str();
}

gen_op_code(VarDeclList) {
	string var1 = var_decl->gen_op_code();
	string var2 = "";

	if(next!= NULL)
		var2 = next->gen_op_code();

	return var1 + var2;
}

//MethodDeclList
gen_op_code(MethodDeclList) {
	string method1 = "";
	string method2 = "";

	if (method_decl_node != NULL)
		method1 = method_decl_node->gen_op_code();

	if (next != NULL)
		method2 = next->gen_op_code();

	return method1 + method2;
}

gen_op_code(MethodDecl) {
	params_list = new ParameterDefList();
	params_map = new ParameterDefMap();

	string m_name = class_name_actual + "_" + method_name;
	string ret = "";
	string param_list = "";
	string modifiers = "";

	string this_param = class_name_actual + " *this";
	if (param_decl_list_node != NULL){
		param_list = param_decl_list_node->gen_op_code();
		this_param += ",";
	}

	if (modifier_list_node != NULL)
		modifiers = modifier_list_node->gen_op_code();//queeeeeeeeeee

	string return_type = "void";
	if (method_kind == 1)
		return_type = method_type_node->gen_op_code();

	ret = return_type + " " + m_name + "(" + this_param + param_list + ");\n";

	if (methods_map != NULL) {
		Type type;
		if (method_type_node != NULL){
			if (method_type_node->getKind() == ClassType_kind){
				type.class_id = return_type;
				type.type_id = Class_Type;
			} else {
				type.class_id = "int";
				type.type_id = Int_Type;
			}
		} else {
			type.class_id = "void";
			type.type_id = Void_Type;
		}

		string c_method_name = class_name_actual + "_" + method_name;
		MethodDef *method = new MethodDef(c_method_name, method_name);

		enum Modifier mod = None;
		if (modifier_list_node != NULL){
			if (modifiers.compare("virtual")){//modifiers == "virtual"){
				mod = Virtual;
				virtualmethods_list->push_back(method);
			} else {
				mod = Override;
				overridemethods_list->push_back(method);
			}
		} else 
			methods_list->push_back(method);

		method->method_return_type = type;
		method->modifier = mod;
		method->method_parameter_list = params_list;
		method->method_parameter_map = params_map;
		method->method_body = NULL;

		(*methods_map)[c_method_name] = method;
	}

	delete params_list;
	delete params_map;
	params_list = NULL;
	params_map = NULL;

	return ret;
}

gen_op_code(ModifierList) {
	if (modifier)
		return "virtual";
	else
		return "override";
}

gen_op_code(ParameterDeclList) {
	string param1 = param_decl_node->gen_op_code();
	string param2 = "";

	if (next != NULL)
		param2 = ", " + next->gen_op_code();

	return param1 + param2;
}

gen_op_code(ParameterDecl) {//-----------------------------------------------------------------
	string param_type = param_type_node->gen_op_code();

	if ((params_list != NULL) && (params_map != NULL)){ //si no es nulo entonces estamos en declaracion de variables
		Type type;
		if (param_type_node->getKind() == ClassType_kind){
			param_name = "*" + param_name;
			type.class_id = param_type;
			type.type_id = Class_Type;
		} else {
			type.class_id = "entero";
			type.type_id = Int_Type;
		}

		ParameterDef *param = new ParameterDef(param_name, type);

		params_list->push_back(param);
		(*params_map)[param_name] = param;
	}

	return param_type + " " + param_name;
}

//MethodImplList
gen_op_code(MethodImpl) {
	string ret = "";
	string param_list = "";
	string stmnts = block->gen_statement_code();

	string standard_this = class_name + " *this";
	if (param_list_node != NULL){
		param_list = param_list_node->gen_op_code();
		standard_this = class_name + " *this, ";
	}

	string return_type = "void";
	if (method_kind == 1)//method
		return_type = method_type_node->gen_op_code();

	ret =	return_type + " " + class_name + "_" + method_name + "(" + standard_this + param_list + ")" + "{\n" +
			stmnts +
		"}\n";

	return ret;
}

gen_op_code(MethodImplList) {
	string method1 = method_impl_node->gen_op_code();
	string method2 = "";

	if (next != NULL)
		method2 = next->gen_op_code();
	return method1 + method2;
}

//TypeDefList
gen_op_code(TypeDefList) {
	string class1 = class_decl_node->gen_op_code();
	string class2 = "";

	if (next != NULL)
		class2 = next->gen_op_code();

	return class1 + class2;
}

gen_op_code(ClassDeclaration) {
	class_name_actual = class_name;

	string ret = "";
	string inherits = "";
	string fields = "";
	string methods = "";

	string base = "";
	if (inherits_node != NULL){
		base = inherits_node->gen_op_code();
		inherits = base + " parent;\n";
	}
	if (field_decl_list_node != NULL) {
		variables_list = new VariableDefList();
		variables_map = new VariableDefMap();

		fields = field_decl_list_node->gen_op_code();
	}

	if (method_decl_list_node != NULL) {
		methods_list = new MethodDefList();
		virtualmethods_list = new MethodDefList();
		overridemethods_list = new MethodDefList();

		methods_map = new MethodDefMap();

		methods = method_decl_list_node->gen_op_code();
	}

//----------------Recoleccion estructuras de datos----------------	
	ClassDef *class_def = new ClassDef(class_name);

	if (inherits_node != NULL) {
		class_def->base = base;
	}

	if (variables_map != NULL) { 
		class_def->field_def_list = new VariableDefList(*variables_list);
		class_def->field_def_map = new VariableDefMap(*variables_map);

		delete variables_list;
		delete variables_map;
		variables_list = NULL;
		variables_map = NULL;
	}

	if (methods_map != NULL) {
		class_def->method_def_list = new MethodDefList(*methods_list);
		class_def->virtualmethod_def_list = new MethodDefList(*virtualmethods_list);
		class_def->overridemethod_def_list = new MethodDefList(*overridemethods_list);

		class_def->method_def_map = new MethodDefMap(*methods_map);

		delete methods_list;
		delete virtualmethods_list;
		delete overridemethods_list;

		delete methods_map;
		methods_list = NULL;
		virtualmethods_list = NULL;
		overridemethods_list = NULL;

		methods_map = NULL;
	}

	classes_map[class_name] = class_def;
//----------------Implementacion VMT----------------
	MethodDefVector *vector_virtuals = new MethodDefVector();
	MethodDefMap *map_virtuals = new MethodDefMap();

/*	MethodDefVector *vector_overrides = new MethodDefVector();
	MethodDefVector *vector_normales = new MethodDefVector();*/

	ClassDef *clase_actual = classes_map[class_name];

	getVectorVirtuales(vector_virtuals, map_virtuals, class_name);

	string vmt_var = "";

	if (vector_virtuals->size() > 0)
		vmt_var = "void **vmt;\n";

	ostringstream out;

	out	<< "typedef struct " << class_name << " {" << endl
		<< inherits
		<< fields
		<< vmt_var 
		<< "} " << class_name << ";" << endl
		<< methods <<  endl << endl;


	out	<< clase_actual->name << " *" << clase_actual->name << "_Create(){" << endl
		<< clase_actual->name << " *tmp = (" << clase_actual->name << "*) malloc(sizeof(" << clase_actual->name << "));" << endl;

	if (inherits_node != NULL){
		out	<< clase_actual->base << " *e = " << clase_actual->base << "_Create();" << endl
			<< "tmp->parent = *e;" << endl
			<< clase_actual->base << "_Free(e);" << endl;
	}

	out	<< endl;

	if (vector_virtuals->size() > 0){
		out	<< "tmp->vmt = malloc (" << vector_virtuals->size() << "*sizeof(void*));" << endl;

		for (int x = 0; x < vector_virtuals->size(); x++){
			out	<< "tmp->vmt[" << x << "] = " << vector_virtuals->at(x)->method_name << ";" << endl;
		}
	}

	out	<< endl;

	if (field_decl_list_node != NULL){
		list<VariableDef*>::iterator it;

		for (it = clase_actual->field_def_list->begin(); it != clase_actual->field_def_list->end(); it++){
			VariableDef *tmp = *it;
			if (tmp->variable_type.type_id == Class_Type)
				out	<< tmp->variable_name << " = NULL;" << endl;
			else
				out	<< tmp->variable_name << " = 0;" << endl;
		}
	}

	out	<< endl
		<< "return tmp;" << endl
		<< "}" << endl << endl;


	out	<< "void " << clase_actual->name << "_Free(" << clase_actual->name << " *this){" << endl;

	if (field_decl_list_node != NULL){
		list<VariableDef*>::iterator it;

		for (it = clase_actual->field_def_list->begin(); it != clase_actual->field_def_list->end(); it++){
			VariableDef *tmp = *it;
			if (tmp->variable_type.type_id == Class_Type)
				out	<< "free(this->" << tmp->variable_name << ");" << endl;
		}
	}

	if (vector_virtuals->size() > 0)
		out	<< "free(this->vmt);" << endl;

	out	<< "free(this);" << endl
		<< "}" << endl << endl;

	class_name_actual = "";

	return out.str();
}

gen_op_code(InheritsNode) {
	return class_name;
}

gen_op_code(FieldDeclList) {
	return "//FieldDeclList\n";
}

gen_op_code(FieldDecl) {
	return "//FieldDecl\n";
}

gen_op_code(ProgramNode) {
	ostringstream out;
	if (typedef_list_node != NULL)
		out	<< "//typedef_list" << endl
			<< typedef_list_node->gen_op_code() << endl << endl;

	if (method_impl_list_node != NULL)
		out	<< "//method_impl_list" << endl
			<< method_impl_list_node->gen_op_code() << endl << endl;

	if (var_decl_list_node != NULL)
		out	<< "//var_decl_list" << endl
			<< var_decl_list_node->gen_op_code() << endl << endl;

	return out.str();
}

//------------------Expr------------------
/****Traduccion de op a c****/


/****Arbol de Expresion****/
%node Expr %abstract %typedef

%node BinaryExpr Expr %abstract = {
	Expr *expr1;
	Expr *expr2;
}

%node AddExpr BinaryExpr
%node SubExpr BinaryExpr
%node MultExpr BinaryExpr
%node DivExpr BinaryExpr
%node GTExpr BinaryExpr
%node GTEExpr BinaryExpr
%node LTExpr BinaryExpr
%node LTEExpr BinaryExpr
%node NEQExpr BinaryExpr
%node EQExpr BinaryExpr

%node NumExpr Expr = {
	int value;
}

%node IDExpr Expr = {
	char *var_name;
}

%node FuncCallExpr Expr = {
	string class_name;
	string method_name;
	
	ExprList *arguments;
}

%node StringExpr Expr = {
	string value;
}

//......gen_code()......

%operation %virtual string gen_code(Expr *this)


gen_code(AddExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	return v1 + "+" + v2;
}

gen_code(SubExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "-" + v2;
}

gen_code(MultExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "*" + v2;
}

gen_code(DivExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "/" + v2;
}

gen_code(GTExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + ">" + v2;
}

gen_code(GTEExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + ">=" + v2;
}

gen_code(LTExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "<" + v2;
}
gen_code(LTEExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "<=" + v2;
}

gen_code(NEQExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "!=" + v2;
}

gen_code(EQExpr) {
	string v1 = expr1->gen_code();
	string v2 = expr2->gen_code();
	
	return v1 + "==" + v2;
}

gen_code(NumExpr) {
	ostringstream out;
	out << value;
	return out.str();
}

gen_code(StringExpr) {
	return "\"" + value + "\"";
}

gen_code(IDExpr) {
	return var_name;
}

gen_code(FuncCallExpr) {
	ostringstream out;
	
	out << class_name << "_" << method_name << "(";
	
	if (arguments != NULL) {
		ExprList::iterator it = arguments->begin();

		while (it != arguments->end()) {
			Expr *expr = *it;
			out << expr->gen_code();
			it++;
			if (it != arguments->end())
				out << ",";
		}
	}

	out << ")";
	
	return out.str();
}

//------------------Statements------------------

/****Arbol de Sentencias****/
%node Statement %abstract %typedef

%node SeqStatement Statement = {
	Statement *st1;
	Statement *st2;
}

%node IfStatement Statement = {
	Expr *condition;
	Statement *st1;
	Statement *st2;
}

%node WhileStatement Statement = {
	Expr *condition;
	Statement *st;
}

%node MethodCallStatement Statement = {
	string class_name;
	string method_name;
	
	ExprList *arguments;
}

%node AssignStatement Statement = {
	char *var_name;
	Expr *expr;
}

%node WriteStatement Statement %abstract = {
	int statement;
}

%node WriteStatementExpr WriteStatement = {
	Expr *expr;
}

%node WriteStatementStr WriteStatement = {
	string value;
}

//......gen_statement_code()......

/*%operation %virtual void process_tree(OPNode *this)*/

/* Code generation for statement */
%operation %virtual string gen_statement_code(Statement *this)

gen_statement_code(SeqStatement) {
	string code1 = st1->gen_statement_code();
	string code2 = st2->gen_statement_code();

	return code1 + code2;
}

gen_statement_code(AssignStatement) {
	string lval = expr->gen_code();
	ostringstream out;
	
	if (string(var_name) == "Result")
		out << "return " << lval << ";" << endl;
	else
		out << var_name << " = " << lval << ";" << endl;

	return out.str();
}

gen_statement_code(MethodCallStatement) {
	ostringstream out;
	
	out << class_name << "_" << method_name << "(";
	
	if (arguments != NULL) {
		ExprList::iterator it = arguments->begin();

		while (it != arguments->end()) {
			Expr *expr = *it;
			out << expr->gen_code();
			it++;
			if (it != arguments->end())
				out << ",";
		}
	}

	out << ");" << endl;
	
	return out.str();
}

gen_statement_code(IfStatement) {
	string val = condition->gen_code();
	string code1 = st1->gen_statement_code();
	string code2 = st2 != NULL? st2->gen_statement_code() : "";
	ostringstream out;
	
	out << "if (" << val << ") {" << endl;
	out << code1;
	out << "}" << endl;
	if (st2 != NULL) {
		out << "else {" << endl;
		out << code2;
		out << "}" << endl;
	}
	return out.str();
}

gen_statement_code(WhileStatement) {
	string cond_str = condition->gen_code();
	string code = st->gen_statement_code();
	ostringstream out;
	
	out << "while (" << cond_str << ") {" << endl;
	out << code;
	out << "}" << endl;
	
	return out.str();
}

gen_statement_code(WriteStatementExpr) {
	string val = expr->gen_code();
	ostringstream out;
	
	switch (statement) {
		case 0:
			out << "printf(\"%d\", " << val << ");" << endl;
			break;
		case 1:
			out << "printf(\"%d\\n\", " << val << ");" << endl;
			break;
	}
	return out.str();
}

gen_statement_code(WriteStatementStr) {
	ostringstream out;
	
	switch (statement) {
		case 0:
			out << "printf(\"" << value << "\");" << endl;
			break;
		case 1:
			out << "printf(\"" << value << "\\n\");" << endl;
			break;
	}
	
	return out.str();
}

